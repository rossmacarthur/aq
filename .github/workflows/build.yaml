name: build

on: [push, pull_request]

env:
  BIN: aq
  RUSTFLAGS: --deny warnings

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        toolchain: [stable, beta, nightly]

    steps:
    - uses: actions/checkout@v2

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.toolchain }}
        components: rustfmt, clippy
        override: true

    - name: Rustfmt
      run: cargo fmt -- --check

    - name: Clippy
      run: cargo clippy --workspace --all-targets

  check-version:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Calculate version from tag
        id: version
        run: echo "::set-output name=value::${GITHUB_REF#refs/tags/}"

      - name: Check tag against package versions
        run: grep '^version = "${{ steps.version.outputs.value }}"$' Cargo.toml

  publish:
    needs: check-version
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Publish
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
      run: cargo publish

  release:
    needs: check-version

    strategy:
      matrix:
        include:
        - { os: macos-latest, target: x86_64-apple-darwin }
        - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu }
        - { os: windows-latest, target: x86_64-pc-windows-msvc }

    name: release (${{ matrix.target }})
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Calculate version from tag
        id: version
        shell: bash
        run: echo "::set-output name=value::${GITHUB_REF#refs/tags/}"

      - name: Build
        shell: bash
        run: cargo build --bin $BIN --locked --release --target ${{ matrix.target }}

      - name: Strip binary
        if: matrix.target != 'x86_64-pc-windows-msvc'
        run: strip target/${{ matrix.target }}/release/$BIN

      - name: Archive
        id: archive
        shell: bash
        run: |
          mkdir release

          cp LICENSE* release
          cp README.md release

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/$BIN.exe release
            archive=$BIN-${{ steps.version.outputs.value }}-${{ matrix.target }}.zip
            7z a $archive release
          else
            cp target/${{ matrix.target }}/release/$BIN release
            archive=$BIN-${{ steps.version.outputs.value }}-${{ matrix.target }}.tar.gz
            cd release
            tar cfz "../$archive" -- *
            cd ..
          fi

          rm -r release
          echo "::set-output name=path::$archive"

      - uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ steps.archive.outputs.path }}
